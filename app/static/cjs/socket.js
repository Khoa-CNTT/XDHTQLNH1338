function displayNotification(message, level = "info") {
  toastr.options = {
    closeButton: true, // Cho ph√©p ng∆∞·ªùi d√πng t·∫Øt th√¥ng b√°o
    progressBar: true, // Thanh ti·∫øn tr√¨nh th·ªùi gian
    newestOnTop: true, // Hi·ªÉn th·ªã th√¥ng b√°o m·ªõi l√™n ƒë·∫ßu
    timeOut: 4000, // Th·ªùi gian hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh (ms)
    extendedTimeOut: 1000, // Khi ng∆∞·ªùi d√πng hover
    positionClass: "toast-top-right", // V·ªã tr√≠ g√≥c ph·∫£i tr√™n c√πng
    preventDuplicates: true, // Tr√°nh tr√πng l·∫∑p c√πng message
    showEasing: "swing",
    hideEasing: "linear",
    showMethod: "fadeIn",
    hideMethod: "fadeOut",
  };
  const toastrMap = {
    success: () => toastr.success(message, "‚úÖ Th√†nh c√¥ng"),
    error: () => toastr.error(message, "‚ùå L·ªói"),
    warning: () => toastr.warning(message, "‚ö†Ô∏è C·∫£nh b√°o"),
    info: () => toastr.info(message, "üîî Th√¥ng b√°o"),
    payment: () => {
      toastr.info(
        `<i class="fas fa-money-bill-wave"></i> ${message}`,
        "üí∞ Thanh to√°n",
        {
          timeOut: 5000,
          closeButton: true,
          allowHtml: true, // ‚¨ÖÔ∏è Quan tr·ªçng ƒë·ªÉ HTML ƒë∆∞·ª£c render
        }
      );
    },
  };

  const notify = toastrMap[level] || toastrMap["info"];
  notify();
}

// WebSocket setup
const socket = new WebSocket("ws://localhost:5001/ws/notifications/order/");

socket.onmessage = function (event) {
  console.log("Received:", event.data);
};

socket.onerror = function (err) {
  console.error("WebSocket error", err);
};

socket.onclose = function () {
  console.log("WebSocket closed");
};

// Khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o t·ª´ server
socket.onmessage = function (event) {
  const data = JSON.parse(event.data);
  const message = data.message;
  const type = data.type;
  const level = data.level;

  if (type == "required_payment_cash") {
    console.log("type", type);
  }

  displayNotification(message, level);
  load_notification_list();
};
